// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/migrate"

	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/comic"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/genre"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Comic is the client for interacting with the Comic builders.
	Comic *ComicClient
	// Genre is the client for interacting with the Genre builders.
	Genre *GenreClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Comic = NewComicClient(c.config)
	c.Genre = NewGenreClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Comic:  NewComicClient(cfg),
		Genre:  NewGenreClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		Comic:  NewComicClient(cfg),
		Genre:  NewGenreClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Comic.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Comic.Use(hooks...)
	c.Genre.Use(hooks...)
}

// ComicClient is a client for the Comic schema.
type ComicClient struct {
	config
}

// NewComicClient returns a client for the Comic from the given config.
func NewComicClient(c config) *ComicClient {
	return &ComicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comic.Hooks(f(g(h())))`.
func (c *ComicClient) Use(hooks ...Hook) {
	c.hooks.Comic = append(c.hooks.Comic, hooks...)
}

// Create returns a create builder for Comic.
func (c *ComicClient) Create() *ComicCreate {
	mutation := newComicMutation(c.config, OpCreate)
	return &ComicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comic entities.
func (c *ComicClient) CreateBulk(builders ...*ComicCreate) *ComicCreateBulk {
	return &ComicCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comic.
func (c *ComicClient) Update() *ComicUpdate {
	mutation := newComicMutation(c.config, OpUpdate)
	return &ComicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComicClient) UpdateOne(co *Comic) *ComicUpdateOne {
	mutation := newComicMutation(c.config, OpUpdateOne, withComic(co))
	return &ComicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComicClient) UpdateOneID(id int) *ComicUpdateOne {
	mutation := newComicMutation(c.config, OpUpdateOne, withComicID(id))
	return &ComicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comic.
func (c *ComicClient) Delete() *ComicDelete {
	mutation := newComicMutation(c.config, OpDelete)
	return &ComicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ComicClient) DeleteOne(co *Comic) *ComicDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ComicClient) DeleteOneID(id int) *ComicDeleteOne {
	builder := c.Delete().Where(comic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComicDeleteOne{builder}
}

// Query returns a query builder for Comic.
func (c *ComicClient) Query() *ComicQuery {
	return &ComicQuery{
		config: c.config,
	}
}

// Get returns a Comic entity by its id.
func (c *ComicClient) Get(ctx context.Context, id int) (*Comic, error) {
	return c.Query().Where(comic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComicClient) GetX(ctx context.Context, id int) *Comic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenres queries the genres edge of a Comic.
func (c *ComicClient) QueryGenres(co *Comic) *GenreQuery {
	query := &GenreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comic.Table, comic.FieldID, id),
			sqlgraph.To(genre.Table, genre.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, comic.GenresTable, comic.GenresPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ComicClient) Hooks() []Hook {
	return c.hooks.Comic
}

// GenreClient is a client for the Genre schema.
type GenreClient struct {
	config
}

// NewGenreClient returns a client for the Genre from the given config.
func NewGenreClient(c config) *GenreClient {
	return &GenreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `genre.Hooks(f(g(h())))`.
func (c *GenreClient) Use(hooks ...Hook) {
	c.hooks.Genre = append(c.hooks.Genre, hooks...)
}

// Create returns a create builder for Genre.
func (c *GenreClient) Create() *GenreCreate {
	mutation := newGenreMutation(c.config, OpCreate)
	return &GenreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Genre entities.
func (c *GenreClient) CreateBulk(builders ...*GenreCreate) *GenreCreateBulk {
	return &GenreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Genre.
func (c *GenreClient) Update() *GenreUpdate {
	mutation := newGenreMutation(c.config, OpUpdate)
	return &GenreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenreClient) UpdateOne(ge *Genre) *GenreUpdateOne {
	mutation := newGenreMutation(c.config, OpUpdateOne, withGenre(ge))
	return &GenreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenreClient) UpdateOneID(id int) *GenreUpdateOne {
	mutation := newGenreMutation(c.config, OpUpdateOne, withGenreID(id))
	return &GenreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Genre.
func (c *GenreClient) Delete() *GenreDelete {
	mutation := newGenreMutation(c.config, OpDelete)
	return &GenreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenreClient) DeleteOne(ge *Genre) *GenreDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenreClient) DeleteOneID(id int) *GenreDeleteOne {
	builder := c.Delete().Where(genre.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenreDeleteOne{builder}
}

// Query returns a query builder for Genre.
func (c *GenreClient) Query() *GenreQuery {
	return &GenreQuery{
		config: c.config,
	}
}

// Get returns a Genre entity by its id.
func (c *GenreClient) Get(ctx context.Context, id int) (*Genre, error) {
	return c.Query().Where(genre.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenreClient) GetX(ctx context.Context, id int) *Genre {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComics queries the comics edge of a Genre.
func (c *GenreClient) QueryComics(ge *Genre) *ComicQuery {
	query := &ComicQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(genre.Table, genre.FieldID, id),
			sqlgraph.To(comic.Table, comic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, genre.ComicsTable, genre.ComicsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenreClient) Hooks() []Hook {
	return c.hooks.Genre
}
