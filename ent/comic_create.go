// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/comic"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/genre"
)

// ComicCreate is the builder for creating a Comic entity.
type ComicCreate struct {
	config
	mutation *ComicMutation
	hooks    []Hook
}

// SetTitle sets the "Title" field.
func (cc *ComicCreate) SetTitle(s string) *ComicCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetAuthor sets the "Author" field.
func (cc *ComicCreate) SetAuthor(s string) *ComicCreate {
	cc.mutation.SetAuthor(s)
	return cc
}

// SetLike sets the "Like" field.
func (cc *ComicCreate) SetLike(s string) *ComicCreate {
	cc.mutation.SetLike(s)
	return cc
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (cc *ComicCreate) AddGenreIDs(ids ...int) *ComicCreate {
	cc.mutation.AddGenreIDs(ids...)
	return cc
}

// AddGenres adds the "genres" edges to the Genre entity.
func (cc *ComicCreate) AddGenres(g ...*Genre) *ComicCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddGenreIDs(ids...)
}

// Mutation returns the ComicMutation object of the builder.
func (cc *ComicCreate) Mutation() *ComicMutation {
	return cc.mutation
}

// Save creates the Comic in the database.
func (cc *ComicCreate) Save(ctx context.Context) (*Comic, error) {
	var (
		err  error
		node *Comic
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComicCreate) SaveX(ctx context.Context) *Comic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComicCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "Title", err: errors.New("ent: missing required field \"Title\"")}
	}
	if _, ok := cc.mutation.Author(); !ok {
		return &ValidationError{Name: "Author", err: errors.New("ent: missing required field \"Author\"")}
	}
	if _, ok := cc.mutation.Like(); !ok {
		return &ValidationError{Name: "Like", err: errors.New("ent: missing required field \"Like\"")}
	}
	return nil
}

func (cc *ComicCreate) sqlSave(ctx context.Context) (*Comic, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ComicCreate) createSpec() (*Comic, *sqlgraph.CreateSpec) {
	var (
		_node = &Comic{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comic.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comic.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := cc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comic.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := cc.mutation.Like(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comic.FieldLike,
		})
		_node.Like = value
	}
	if nodes := cc.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.GenresTable,
			Columns: comic.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: genre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComicCreateBulk is the builder for creating many Comic entities in bulk.
type ComicCreateBulk struct {
	config
	builders []*ComicCreate
}

// Save creates the Comic entities in the database.
func (ccb *ComicCreateBulk) Save(ctx context.Context) ([]*Comic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ComicCreateBulk) SaveX(ctx context.Context) []*Comic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
