// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/comic"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/genre"
	"github.com/RiskyFeryansyahP/ir-comics-recommendation/ent/predicate"
)

// GenreUpdate is the builder for updating Genre entities.
type GenreUpdate struct {
	config
	hooks    []Hook
	mutation *GenreMutation
}

// Where adds a new predicate for the GenreUpdate builder.
func (gu *GenreUpdate) Where(ps ...predicate.Genre) *GenreUpdate {
	gu.mutation.predicates = append(gu.mutation.predicates, ps...)
	return gu
}

// SetName sets the "Name" field.
func (gu *GenreUpdate) SetName(s string) *GenreUpdate {
	gu.mutation.SetName(s)
	return gu
}

// AddComicIDs adds the "comics" edge to the Comic entity by IDs.
func (gu *GenreUpdate) AddComicIDs(ids ...int) *GenreUpdate {
	gu.mutation.AddComicIDs(ids...)
	return gu
}

// AddComics adds the "comics" edges to the Comic entity.
func (gu *GenreUpdate) AddComics(c ...*Comic) *GenreUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddComicIDs(ids...)
}

// Mutation returns the GenreMutation object of the builder.
func (gu *GenreUpdate) Mutation() *GenreMutation {
	return gu.mutation
}

// ClearComics clears all "comics" edges to the Comic entity.
func (gu *GenreUpdate) ClearComics() *GenreUpdate {
	gu.mutation.ClearComics()
	return gu
}

// RemoveComicIDs removes the "comics" edge to Comic entities by IDs.
func (gu *GenreUpdate) RemoveComicIDs(ids ...int) *GenreUpdate {
	gu.mutation.RemoveComicIDs(ids...)
	return gu
}

// RemoveComics removes "comics" edges to Comic entities.
func (gu *GenreUpdate) RemoveComics(c ...*Comic) *GenreUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveComicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GenreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GenreUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GenreUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GenreUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GenreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   genre.Table,
			Columns: genre.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: genre.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: genre.FieldName,
		})
	}
	if gu.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedComicsIDs(); len(nodes) > 0 && !gu.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ComicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genre.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GenreUpdateOne is the builder for updating a single Genre entity.
type GenreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GenreMutation
}

// SetName sets the "Name" field.
func (guo *GenreUpdateOne) SetName(s string) *GenreUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// AddComicIDs adds the "comics" edge to the Comic entity by IDs.
func (guo *GenreUpdateOne) AddComicIDs(ids ...int) *GenreUpdateOne {
	guo.mutation.AddComicIDs(ids...)
	return guo
}

// AddComics adds the "comics" edges to the Comic entity.
func (guo *GenreUpdateOne) AddComics(c ...*Comic) *GenreUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddComicIDs(ids...)
}

// Mutation returns the GenreMutation object of the builder.
func (guo *GenreUpdateOne) Mutation() *GenreMutation {
	return guo.mutation
}

// ClearComics clears all "comics" edges to the Comic entity.
func (guo *GenreUpdateOne) ClearComics() *GenreUpdateOne {
	guo.mutation.ClearComics()
	return guo
}

// RemoveComicIDs removes the "comics" edge to Comic entities by IDs.
func (guo *GenreUpdateOne) RemoveComicIDs(ids ...int) *GenreUpdateOne {
	guo.mutation.RemoveComicIDs(ids...)
	return guo
}

// RemoveComics removes "comics" edges to Comic entities.
func (guo *GenreUpdateOne) RemoveComics(c ...*Comic) *GenreUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveComicIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GenreUpdateOne) Select(field string, fields ...string) *GenreUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Genre entity.
func (guo *GenreUpdateOne) Save(ctx context.Context) (*Genre, error) {
	var (
		err  error
		node *Genre
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GenreUpdateOne) SaveX(ctx context.Context) *Genre {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GenreUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GenreUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GenreUpdateOne) sqlSave(ctx context.Context) (_node *Genre, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   genre.Table,
			Columns: genre.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: genre.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Genre.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, genre.FieldID)
		for _, f := range fields {
			if !genre.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != genre.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: genre.FieldName,
		})
	}
	if guo.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedComicsIDs(); len(nodes) > 0 && !guo.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ComicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   genre.ComicsTable,
			Columns: genre.ComicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Genre{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genre.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
